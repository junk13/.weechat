#
# plugins.conf -- weechat v1.0-dev
#

[var]
fifo.fifo = "on"
guile.check_license = "off"
lua.check_license = "off"
perl.awaylog.command = ""
perl.awaylog.name_color = "default"
perl.awaylog.notify = "off"
perl.awaylog.on_away_only = "off"
perl.awaylog.plugin_color = "default"
perl.beep.beep_command_dcc = "$bell"
perl.beep.beep_command_highlight = "$bell"
perl.beep.beep_command_pv = "$bell"
perl.beep.beep_command_timeout = "30000"
perl.beep.beep_dcc = "on"
perl.beep.beep_highlight = "on"
perl.beep.beep_highlight_blacklist = "off"
perl.beep.beep_highlight_whitelist = "off"
perl.beep.beep_pv = "on"
perl.beep.beep_pv_blacklist = "off"
perl.beep.beep_pv_whitelist = "off"
perl.beep.beep_trigger_highlight = ""
perl.beep.beep_trigger_pv = ""
perl.beep.bell_always = ""
perl.beep.blacklist_nicks = ""
perl.beep.whitelist_channels = ""
perl.beep.whitelist_nicks = ""
perl.buddylist.buddy.on.server = "on"
perl.buddylist.buddy.on.server.color = "lightgreen"
perl.buddylist.buddylist = "%h/buddylist.txt"
perl.buddylist.callback.timeout = "60"
perl.buddylist.check.buddies = "20"
perl.buddylist.color.away = "cyan"
perl.buddylist.color.default = "default"
perl.buddylist.color.number = "lightred"
perl.buddylist.color.offline = "blue"
perl.buddylist.color.online = "yellow"
perl.buddylist.color.server = "white"
perl.buddylist.color.server.offline = "hide"
perl.buddylist.display.original.nick = "off"
perl.buddylist.display.social.net = "on"
perl.buddylist.display.social.net.color = "yellow"
perl.buddylist.hide.bar = "on"
perl.buddylist.hide.buddy.if.offline = "off"
perl.buddylist.hide.server.if.buddies.offline = "off"
perl.buddylist.hide.servername.in.buddylist = "off"
perl.buddylist.show.query = "on"
perl.buddylist.sort = "default"
perl.buddylist.text.away = ""
perl.buddylist.text.color = "white"
perl.buddylist.text.offline = ""
perl.buddylist.text.online = ""
perl.buddylist.use.redirection = "on"
perl.chanmon.alignment = "channel"
perl.chanmon.color_buf = "on"
perl.chanmon.dynamic = "on"
perl.chanmon.logging = "off"
perl.chanmon.merge_private = "off"
perl.chanmon.nick_prefix = "<"
perl.chanmon.nick_suffix = ">"
perl.chanmon.output = "buffer"
perl.chanmon.short_names = "off"
perl.chanmon.show_aways = "off"
perl.check_license = "off"
perl.highmon.alignment = "channel"
perl.highmon.away_only = "off"
perl.highmon.color_buf = "on"
perl.highmon.hotlist_show = "off"
perl.highmon.logging = "off"
perl.highmon.merge_private = "off"
perl.highmon.nick_prefix = "<"
perl.highmon.nick_suffix = ">"
perl.highmon.output = "buffer"
perl.highmon.short_names = "off"
perl.sort_buffers.hook_signal = "off"
perl.sort_buffers.server_wide = "on"
perl.sort_buffers.sort_order = "default"
perl.stalker.additional_join_info = "off"
perl.stalker.db_name = "%h/nicks.db"
perl.stalker.debug = "off"
perl.stalker.flood_max_nicks = "20"
perl.stalker.flood_timer = "10"
perl.stalker.guest_host_regex = "^webchat"
perl.stalker.guest_nick_regex = "^(guest|weebot|Floodbot|ChanServ).*"
perl.stalker.ignore_guest_hosts = "off"
perl.stalker.ignore_guest_nicks = "on"
perl.stalker.ignore_nickchange = "off"
perl.stalker.ignore_whois = "off"
perl.stalker.max_recursion = "20"
perl.stalker.normalize_nicks = "on"
perl.stalker.recursive_search = "on"
perl.stalker.search_this_network_only = "on"
perl.stalker.tags = ""
perl.stalker.timeout = "1"
perl.stalker.use_localvar = "off"
perl.sysinfo.baritems = "memory"
perl.sysinfo.color = "default"
perl.sysinfo.nic = ""
perl.sysinfo.nicname = ""
perl.sysinfo.refresh = "0"
perl.sysinfo.showbattery = "off"
perl.sysinfo.showcpu = "on"
perl.sysinfo.showdiskusage = "on"
perl.sysinfo.showdistro = "on"
perl.sysinfo.showhostname = "on"
perl.sysinfo.showloadaverage = "on"
perl.sysinfo.showmemoryusage = "on"
perl.sysinfo.shownetworktraffic = "off"
perl.sysinfo.showos = "on"
perl.sysinfo.showprocesses = "on"
perl.sysinfo.showuptime = "on"
perl.sysinfo.showusers = "on"
perl.sysinfo.text_battery = "Battery: "
perl.sysinfo.text_color = "default"
perl.sysinfo.text_cpu = "CPU: "
perl.sysinfo.text_diskusage = "Disk Usage: "
perl.sysinfo.text_distro = "Distro: "
perl.sysinfo.text_dummy = "-"
perl.sysinfo.text_hostname = "Host: "
perl.sysinfo.text_loadaverage = "Load Average: "
perl.sysinfo.text_memoryusage = "Memory Usage: "
perl.sysinfo.text_network = "Network: "
perl.sysinfo.text_os = "OS: "
perl.sysinfo.text_processes = "Processes: "
perl.sysinfo.text_uptime = "Uptime: "
perl.sysinfo.text_users = "Users: "
perl.sysinfo.useshorthostname = "on"
perl.topicsed.color_message = "green"
perl.topicsed.message = "edit Topic: "
python.announce_url_title.announce_public = "off"
python.announce_url_title.buffers = "freenode.#testing,"
python.announce_url_title.buffers_notice = "freenode.#testing,"
python.announce_url_title.global = "off"
python.announce_url_title.global_prefix = "url"
python.announce_url_title.ignore_buffers = "grep,"
python.announce_url_title.prefix = ""
python.announce_url_title.reannounce_wait = "5"
python.announce_url_title.suffix = ""
python.announce_url_title.title_max_length = "80"
python.announce_url_title.url_ignore = ""
python.announce_url_title.user_agent = "WeeChat/%(version)s (http://www.weechat.org)"
python.autojoin.autosave = "off"
python.autojoin_on_invite.ignore_channels = ""
python.autojoin_on_invite.ignore_nicks = ""
python.autojoin_on_invite.whitelist_channels = ""
python.autojoin_on_invite.whitelist_nicks = ""
python.away_action.command = "/mute"
python.away_action.force_enabled = "on"
python.away_action.ignore_channel = ""
python.away_action.ignore_nick = ""
python.away_action.ignore_text = ""
python.away_action.include_channel = "on"
python.buffer_autoclose.age_limit = "30"
python.buffer_autoclose.ignore = ""
python.buffer_autoclose.interval = "1"
python.chanact.color_1 = "white"
python.chanact.color_2 = "cyan"
python.chanact.color_3 = "lightcyan"
python.chanact.color_4 = "yellow"
python.chanact.color_8 = "cyan"
python.chanact.color_default = "default"
python.chanact.delimiter = ","
python.chanact.item_length = "8"
python.chanact.lowest_priority = "0"
python.chanact.message = "Act: "
python.chanact.skip_number_binds = "on"
python.chanact.sort_by_number = "off"
python.chanact.use_keybindings = "on"
python.chanop.autodeop = "on"
python.chanop.autodeop_delay = "180"
python.chanop.default_banmask = "host"
python.chanop.display_affected = "on"
python.chanop.enable_bar = "on"
python.chanop.enable_multi_kick = "off"
python.chanop.enable_remove = "off"
python.chanop.kick_reason = ""
python.chanop.op_command = "/msg chanserv op $channel $nick"
python.chanop.watchlist.fnd = "##bcode,##techfilmer,#polr"
python.chanop.watchlist.freenode = "##techfilmer"
python.chanop.watchlist.sn = "#services"
python.check_license = "off"
python.clone_scanner.autofocus = "on"
python.clone_scanner.clone_onjoin_alert_key = "mask"
python.clone_scanner.clone_report_key = "mask"
python.clone_scanner.colors.clone_report.clone.match = "chat"
python.clone_scanner.colors.clone_report.clone.message = "chat"
python.clone_scanner.colors.clone_report.header.channel = "bold"
python.clone_scanner.colors.clone_report.header.message = "chat"
python.clone_scanner.colors.clone_report.header.number_of_hosts = "bold"
python.clone_scanner.colors.clone_report.subheader.host = "bold"
python.clone_scanner.colors.clone_report.subheader.message = "chat"
python.clone_scanner.colors.clone_report.subheader.number_of_clones = "bold"
python.clone_scanner.colors.join_messages.channel = "bold"
python.clone_scanner.colors.join_messages.identhost = "chat"
python.clone_scanner.colors.join_messages.message = "chat"
python.clone_scanner.colors.join_messages.nick = "bold"
python.clone_scanner.colors.mask.identhost = ""
python.clone_scanner.colors.mask.nick = "bold"
python.clone_scanner.colors.onjoin_alert.channel = "red"
python.clone_scanner.colors.onjoin_alert.matches = "bold red"
python.clone_scanner.colors.onjoin_alert.message = "red"
python.clone_scanner.colors.onjoin_alert.nick = "bold red"
python.clone_scanner.compare_idents = "off"
python.clone_scanner.display_join_messages = "off"
python.clone_scanner.display_onjoin_alert_clone_buffer = "on"
python.clone_scanner.display_onjoin_alert_current_buffer = "off"
python.clone_scanner.display_onjoin_alert_target_buffer = "on"
python.clone_scanner.display_scan_report_clone_buffer = "on"
python.clone_scanner.display_scan_report_current_buffer = "on"
python.clone_scanner.display_scan_report_target_buffer = "off"
python.colorize_nicks.blacklist_channels = ""
python.colorize_nicks.blacklist_nicks = "so,root"
python.colorize_nicks.colorize_input = "off"
python.colorize_nicks.greedy_matching = "on"
python.colorize_nicks.ignore_tags = ""
python.colorize_nicks.min_nick_length = "2"
python.cron.auto_reload = "on"
python.cron.auto_save = "on"
python.cron.filename = "%h/cron.txt"
python.cron.quiet_exec = "off"
python.cron.quiet_load = "off"
python.cron.quiet_save = "on"
python.go.auto_jump = "off"
python.go.color_name = "black,cyan"
python.go.color_name_highlight = "red,cyan"
python.go.color_name_highlight_selected = "red,brown"
python.go.color_name_selected = "black,brown"
python.go.color_number = "yellow,magenta"
python.go.color_number_selected = "yellow,red"
python.go.message = "Go to: "
python.go.short_name = "off"
python.go.sort_by_activity = "off"
python.go.use_core_instead_weechat = "off"
python.grep.clear_buffer = "off"
python.grep.default_tail_head = "10"
python.grep.go_to_buffer = "on"
python.grep.log_filter = ""
python.grep.max_lines = "4000"
python.grep.show_summary = "on"
python.grep.size_limit = "2048"
python.memon.state = "off"
python.memon.time = "5000"
python.nma.activated = "on"
python.nma.apikey = ""
python.nma.debug = "off"
python.nma.emergency_hilights = "-1"
python.nma.emergency_priv_msg = "0"
python.nma.nick_separator_left = "("
python.nma.nick_separator_right = ") "
python.nma.notify_hilights = "on"
python.nma.notify_priv_msg = "on"
python.nma.only_away = "off"
python.nma.smart_notification = "off"
python.nma.use_push_if_possible = "on"
python.notification_center.show_highlights = "on"
python.notification_center.show_private_message = "on"
python.screen_away.away_suffix = ""
python.screen_away.command_on_attach = ""
python.screen_away.command_on_detach = ""
python.screen_away.ignore = ""
python.screen_away.ignore_relays = "off"
python.screen_away.interval = "5"
python.screen_away.message = "Detached from screen"
python.screen_away.set_away = "on"
python.text_replace.replacement_pairs = "{shrug}=¯\_(ツ)_/¯, {lod}=ಠ_ಠ"
python.text_replace.replacement_words = "hhe=heh"
python.urlserver.buffer_short_name = "off"
python.urlserver.color = "darkgray"
python.urlserver.color_in_msg = ""
python.urlserver.debug = "off"
python.urlserver.display_urls = "off"
python.urlserver.display_urls_in_msg = "on"
python.urlserver.http_allowed_ips = ""
python.urlserver.http_auth = ""
python.urlserver.http_autostart = "on"
python.urlserver.http_bg_color = "#f4f4f4"
python.urlserver.http_css_url = ""
python.urlserver.http_embed_image = "off"
python.urlserver.http_embed_youtube = "off"
python.urlserver.http_embed_youtube_size = "480*350"
python.urlserver.http_fg_color = "#000"
python.urlserver.http_hostname = ""
python.urlserver.http_hostname_display = ""
python.urlserver.http_port = ""
python.urlserver.http_port_display = ""
python.urlserver.http_prefix_suffix = " "
python.urlserver.http_scheme_display = "http"
python.urlserver.http_time_format = "%d/%m/%y %H:%M:%S"
python.urlserver.http_title = "WeeChat URLs"
python.urlserver.http_url_prefix = ""
python.urlserver.msg_ignore_buffers = "core.weechat,python.grep"
python.urlserver.msg_ignore_dup_urls = "on"
python.urlserver.msg_ignore_regex = ""
python.urlserver.msg_ignore_tags = "irc_quit,irc_part,notify_none"
python.urlserver.msg_require_tags = "nick_"
python.urlserver.separators = "[|]"
python.urlserver.url_min_length = "0"
python.urlserver.urls_amount = "100"
python.weather.city = ""
python.weather.interval = "10"
python.weather.language = "en"
python.weather.timeout = "10"
ruby.check_license = "off"
tcl.check_license = "off"

[desc]
perl.beep.beep_command_dcc = "command for beep on dcc, special value "$bell" is allowed, as well as "$bell;command" (default: "$bell")"
perl.beep.beep_command_highlight = "command for beep on highlight, special value "$bell" is allowed, as well as "$bell;command" (default: "$bell")"
perl.beep.beep_command_pv = "command for beep on private message, special value "$bell" is allowed, as well as "$bell;command" (default: "$bell")"
perl.beep.beep_command_timeout = "timeout for command run (in milliseconds, 0 = never kill (not recommended)) (default: "30000")"
perl.beep.beep_dcc = "beep on dcc (default: "on")"
perl.beep.beep_highlight = "beep on highlight (default: "on")"
perl.beep.beep_highlight_blacklist = "turn blacklist for highlights on or off (default: "off")"
perl.beep.beep_highlight_whitelist = "turn whitelist for highlights on or off (default: "off")"
perl.beep.beep_pv = "beep on private message (default: "on")"
perl.beep.beep_pv_blacklist = "turn blacklist for private messages on or off (default: "off")"
perl.beep.beep_pv_whitelist = "turn whitelist for private messages on or off (default: "off")"
perl.beep.beep_trigger_highlight = "word that will trigger execution of beep_command_highlight (if empty, anything will trigger) (default: "")"
perl.beep.beep_trigger_pv = "word that will trigger execution of beep_command_pv (it empty, anything will trigger) (default: "")"
perl.beep.bell_always = "use $bell on private messages and/or highlights regardless of trigger and whitelist settings (example: "pv,highlight") (default: "")"
perl.beep.blacklist_nicks = "comma-separated list of "server.nick": if not empty, these nicks will not be able to trigger execution of commands. Cannot be used in conjuction with whitelist (example: "freenode.nick1,freenode.nick2") (default: "")"
perl.beep.whitelist_channels = "comma-separated list of "server.#channel": if not empty, only these channels will trigger execution of commands (example: "freenode.#weechat,freenode.#channel2") (default: "")"
perl.beep.whitelist_nicks = "comma-separated list of "server.nick": if not empty, only these nicks will trigger execution of commands (example: "freenode.nick1,freenode.nick2") (default: "")"
perl.buddylist.buddy.on.server = "show buddy who is connected to a server, but not visiting the same channel(s) (default: on)"
perl.buddylist.buddy.on.server.color = "color for online buddy but not visiting the same channel(s) (default: lightgreen)"
perl.buddylist.buddylist = "path/file-name to store your buddies. "%h" will be replaced by WeeChat home (by default: ~/.weechat)"
perl.buddylist.callback.timeout = "time in seconds to wait for answer from server. (default: 60)"
perl.buddylist.check.buddies = "time in seconds to send a /whois request to server. Be careful not to flood server (default: 20)"
perl.buddylist.color.away = "color for away buddies"
perl.buddylist.color.default = "fall back color. (default: standard weechat color)"
perl.buddylist.color.number = "color for channel number (default: lightred). If empty, channel list option is off"
perl.buddylist.color.offline = "color for offline buddies"
perl.buddylist.color.online = "color for online buddies"
perl.buddylist.color.server = "color for servername"
perl.buddylist.color.server.offline = "color for disconnected server (default: hide)"
perl.buddylist.display.original.nick = "display original nickname even if buddy changed his /nick (you have to add new nick to buddylist (default: off)"
perl.buddylist.display.social.net = "using bitlbee, buddies will be sorted in sublists with social-network name (eg. msn/jabber/facebook)(default: on)"
perl.buddylist.display.social.net.color = "color for social-network name (default: yellow)"
perl.buddylist.hide.bar = "hides buddylist bar when all servers with added buddies are offline (on = default, always = buddylist bar will be hidden (for example if you want to add item 'buddylist' to 'weechat.bar.status.items', off = buddylist bar will not be hidden))"
perl.buddylist.hide.buddy.if.offline = "hide buddy if offline (default: off)"
perl.buddylist.hide.server.if.buddies.offline = "hides server when all buddies are offline for this server (default: off)"
perl.buddylist.hide.servername.in.buddylist = "hide the servername in buddylist. If "on" only nicks will be displayed in buddylist (default: off)"
perl.buddylist.show.query = "displays a query buffer in front of the channel list"
perl.buddylist.sort = "sort method for buddylist (default = buddylist will be sort by nickname, status = buddylist will be sort by status (online, away, offline))"
perl.buddylist.text.away = "optional away text in buddylist (sort method has to be 'status')"
perl.buddylist.text.color = "color for optional online/away/offline-text in buddylist (default: white)"
perl.buddylist.text.offline = "optional offline text in buddylist (sort method has to be 'status')"
perl.buddylist.text.online = "optional online text in buddylist (sort method has to be 'status')"
perl.buddylist.use.redirection = "using redirection to get status of buddies (needs weechat >=0.3.4) (default: on)"
perl.sort_buffers.hook_signal = "if "on" buffers will be sort every time a buffer was opened. Keep in mind that sorting buffers will delete read_marker. (default: off)"
perl.sort_buffers.server_wide = "buffers will be sorted server wide. This option takes only effect when option "hook_signal" is on. (default: on)"
perl.sort_buffers.sort_order = "sort of buffers "default" or "reverse" order. This option takes only effect when option "hook_signal" is on. (default: default)"
perl.stalker.additional_join_info = "add a line below the JOIN message that will display alternative nicks (tags: "irc_join", "irc_smart_filter" will be add to additional_join_info). You can use a localvar to drop additional join info for specific buffer(s) "stalker_drop_additional_join_info" (default: off)"
perl.stalker.db_name = "file containing the SQLite database where information is recorded. This database is created on loading of stalker if it does not exist. ("%h" will be replaced by WeeChat home, "~/.weechat" by default) (default: %h/nicks.db)"
perl.stalker.debug = "Prints debug output to core buffer so you know exactly what is going on. This is far too verbose to be enabled when not actively debugging something. (default: off)"
perl.stalker.flood_max_nicks = "Maximum number of joins to allow in flood_timer length of time. Once maximum number of joins is reached, joins will be ignored until the timer ends (default:20)"
perl.stalker.flood_timer = "Time in seconds for which flood protection is active. Once max_nicks is reached, joins will be ignored for the remaining duration of the timer. (default:10)"
perl.stalker.guest_host_regex = "regex mask to ignore host masks"
perl.stalker.guest_nick_regex = "Some networks set default nicknames when a user fails to identify to nickserv, other networks using relay-bots, some irc clients set default nicknames when someone connects and often these change from network to network depending on who is configuring the java irc clients. This allows a regular expression to be entered. When a nickname matches the regular expression and "ignore_guest_nicks" is enabled the nickname is dropped from the search as if it had never been seen. (default: ^(guest|weebot|Floodbot).*)"
perl.stalker.ignore_guest_hosts = "See option guest_host_regex"
perl.stalker.ignore_guest_nicks = "See option guest_nick_regex"
perl.stalker.ignore_nickchange = "When enabled, /NICK changes won't be monitored. (default: off)"
perl.stalker.ignore_whois = "When enabled, /WHOIS won't be monitored. (default: off)"
perl.stalker.max_recursion = "For each correlation between nick <-> host that happens, one point of recursion happens. A corrupt database, general evilness, or misfortune can cause the recursion to skyrocket. This is a ceiling number that says if after this many correlation attempts we have not found all nickname and hostname correlations, stop the process and return the list to this point. Use this option with care on slower machines like raspberry pi."
perl.stalker.normalize_nicks = "this option will truncate special chars from username (like: ~) (default: on)"
perl.stalker.recursive_search = "When enabled, recursive search causes stalker to function better than a simple hostname to nickname map. Disabling the recursive search in effect turns stalker into a more standard hostname -> nickname map."
perl.stalker.search_this_network_only = "When enabled searches are limited to within the network the window is currently set on. Turning this off is really only useful if multiple networks don't encode the hostmask. (default: on)"
perl.stalker.tags = "comma separated list of tags used for messages printed by stalker. See documentation for possible tags (e.g. 'no_log', 'no_highlight'). This option does not effect DEBUG messages."
perl.stalker.timeout = "timeout in seconds for hook_process(), used with option "additional_join_info". On slower machines, like raspberry pi, increase time. (default: 1)"
perl.stalker.use_localvar = "When enabled, only channels with a localvar 'stalker' will be monitored. This option will not affect /NICK and /WHOIS monitoring. It's only for /JOIN messages. (default: off)"
perl.sysinfo.baritems = "comma separated list with name(s) of systeminformation to be displayed in a bar"
perl.sysinfo.color = "color for optionsname"
perl.sysinfo.nic = "comma separated list to specify your NIC interface name(s) (wlan0,eth0,etc)"
perl.sysinfo.nicname = "comma separated list with name(s) for interface(s) (wireless,cable,etc)"
perl.sysinfo.refresh = "refresh rate in seconds for info-bar (0 means off)"
perl.sysinfo.text_color = "text color for results"
perl.sysinfo.text_dummy = "separator between different options"
python.clone_scanner.autofocus = "Focus the clone_scanner buffer in the current window if it isn't already displayed by a window."
python.clone_scanner.clone_onjoin_alert_key = "Which 'key' to display in the on-join alerts: 'mask' for full hostmasks, or 'nick' for nicks"
python.clone_scanner.clone_report_key = "Which 'key' to display in the clone report: 'mask' for full hostmasks, or 'nick' for nicks"
python.clone_scanner.colors.clone_report.clone.match = "The colour of the match details (masks or nicks) in the clone report."
python.clone_scanner.colors.clone_report.clone.message = "The colour of the clone hit in the clone report message."
python.clone_scanner.colors.clone_report.header.channel = "The colour of the channel name in the clone report header."
python.clone_scanner.colors.clone_report.header.message = "The colour of the clone report header."
python.clone_scanner.colors.clone_report.header.number_of_hosts = "The colour of the number of hosts in the clone report header."
python.clone_scanner.colors.clone_report.subheader.host = "The colour of the host in the clone report subheader."
python.clone_scanner.colors.clone_report.subheader.message = "The colour of the clone report subheader."
python.clone_scanner.colors.clone_report.subheader.number_of_clones = "The colour of the number of clones in the clone report subheader."
python.clone_scanner.colors.join_messages.channel = "The colour for the 'channel'-part of the join messages."
python.clone_scanner.colors.join_messages.identhost = "The colour for the 'ident@host'-part of the join messages."
python.clone_scanner.colors.join_messages.message = "The base colour for the join messages."
python.clone_scanner.colors.join_messages.nick = "The colour for the 'nick'-part of the join messages. Note: if you have colorize_nicks, this option might not always work as expected."
python.clone_scanner.colors.mask.identhost = "The formatting of the identhost in the match mask."
python.clone_scanner.colors.mask.nick = "The formatting of the nick in the match mask."
python.clone_scanner.colors.onjoin_alert.channel = "The on-join clone alert's channel colour. Formats are space separated."
python.clone_scanner.colors.onjoin_alert.matches = "The on-join clone alert's matches (masks or nicks) colour. Formats are space separated. Note: if you have colorize_nicks, this option might not work as expected."
python.clone_scanner.colors.onjoin_alert.message = "The on-join clone alert's message colour. Formats are space separated."
python.clone_scanner.colors.onjoin_alert.nick = "The on-join clone alert's nick colour. Formats are space separated. Note: if you have colorize_nicks, this option might not work as expected."
python.clone_scanner.compare_idents = "Match against ident@host.name instead of just the hostname. Useful if you don't want different people from bouncers marked as clones"
python.clone_scanner.display_join_messages = "Display all joins in the clone_scanner buffer"
python.clone_scanner.display_onjoin_alert_clone_buffer = "Display an on-join clone alert in the clone_scanner buffer"
python.clone_scanner.display_onjoin_alert_current_buffer = "Display an on-join clone alert in the current buffer"
python.clone_scanner.display_onjoin_alert_target_buffer = "Display an on-join clone alert in the buffer where the clone was detected"
python.clone_scanner.display_scan_report_clone_buffer = "Display manual scan reports in the clone buffer"
python.clone_scanner.display_scan_report_current_buffer = "Display manual scan reports in the current buffer"
python.clone_scanner.display_scan_report_target_buffer = "Display manual scan reports in the buffer of the scanned channel"
python.nma.activated = "Whether the plugin will send notifications or not"
python.nma.apikey = "Your NMA API key"
python.nma.debug = "Print debug messages"
python.nma.emergency_hilights = "Emergency of the highlight notifications (-2 is lowest, 2 is highest)"
python.nma.emergency_priv_msg = "Emergency of the query notifications (-2 is lowest, 2 is highest)"
python.nma.nick_separator_left = "Left separator for the nick that highlighted you"
python.nma.nick_separator_right = "Right separator for the nick that highlighted you"
python.nma.notify_hilights = "Send NMA notifications when you get highlights"
python.nma.notify_priv_msg = "Send NMA notifications when you get a query message"
python.nma.only_away = "Only send notifications if you are away"
python.nma.smart_notification = "Don't send notifications if you are focusing the channel (default: off)"
python.nma.use_push_if_possible = "If on, will try to fit the whole message in the title, which is send with the PUSH protocol. This makes you receive queries more quickly."
python.screen_away.away_suffix = "What to append to your nick when you're away."
python.screen_away.command_on_attach = "Commands to execute on attach, separated by semicolon"
python.screen_away.command_on_detach = "Commands to execute on detach, separated by semicolon"
python.screen_away.ignore = "Comma-separated list of servers to ignore."
python.screen_away.ignore_relays = "Only check screen status and ignore relay interfaces"
python.screen_away.interval = "How often in seconds to check screen status"
python.screen_away.message = "Away mesage"
python.screen_away.set_away = "Set user as away."
python.urlserver.buffer_short_name = "use buffer short name on dedicated buffer (default: "off")"
python.urlserver.color = "color for urls displayed after message (default: "darkgray")"
python.urlserver.color_in_msg = "color for urls displayed inside irc message: it is a number (irc color) between 00 and 15 (see doc for a list of irc colors) (default: "")"
python.urlserver.debug = "print some debug messages (default: "off")"
python.urlserver.display_urls = "display URLs below messages (default: "on")"
python.urlserver.display_urls_in_msg = "add shorten url next to the original url (only in IRC messages) (useful for urlserver behind relay/irc) (default: "off")"
python.urlserver.http_allowed_ips = "regex for IPs allowed to use server (example: "^(123.45.67.89|192.160.*)$") (default: "")"
python.urlserver.http_auth = "login and password (format: "login:password") required to access to page with list of URLs (default: "")"
python.urlserver.http_autostart = "start the built-in HTTP server automatically) (default: "on")"
python.urlserver.http_bg_color = "background color for HTML page (default: "#f4f4f4")"
python.urlserver.http_css_url = "URL of external Cascading Style Sheet to add (BE CAREFUL: the HTTP referer will be sent to site hosting CSS file!) (empty value = use default embedded CSS) (default: "")"
python.urlserver.http_embed_image = "embed images in HTML page (BE CAREFUL: the HTTP referer will be sent to site hosting image!) (default: "off")"
python.urlserver.http_embed_youtube = "embed youtube videos in HTML page (BE CAREFUL: the HTTP referer will be sent to youtube!) (default: "off")"
python.urlserver.http_embed_youtube_size = "size for embedded youtube video, format is "xxx*yyy" (default: "480*350")"
python.urlserver.http_fg_color = "foreground color for HTML page (default: "#000")"
python.urlserver.http_hostname = "force hostname/IP in bind of socket (empty value = auto-detect current hostname) (default: "")"
python.urlserver.http_hostname_display = "display this hostname in shortened URLs (default: "")"
python.urlserver.http_port = "force port for listening (empty value = find a random free port) (default: "")"
python.urlserver.http_port_display = "display this port in shortened URLs. Useful if you forward a different external port to the internal port (default: "")"
python.urlserver.http_prefix_suffix = "suffix displayed between prefix and message in HTML page (default: " ")"
python.urlserver.http_scheme_display = "display this scheme in shortened URLs (default: "http")"
python.urlserver.http_time_format = "time format in the HTML page (default: "%d/%m/%y %H:%M:%S")"
python.urlserver.http_title = "title of the HTML page (default: "WeeChat URLs")"
python.urlserver.http_url_prefix = "prefix to add in URLs to prevent external people to scan your URLs (for example: prefix "xx" will give URL: http://host.com:1234/xx/8) (default: "")"
python.urlserver.msg_ignore_buffers = "comma-separated list (without spaces) of buffers to ignore (full name like "irc.freenode.#weechat") (default: "core.weechat,python.grep")"
python.urlserver.msg_ignore_dup_urls = "ignore duplicated URLs (do not add an URL in list if it is already) (default: "off")"
python.urlserver.msg_ignore_regex = "ignore messages matching this regex (default: "")"
python.urlserver.msg_ignore_tags = "comma-separated list (without spaces) of tags (or beginning of tags) to ignore (for example, use "notify_none" to ignore self messages or "nick_weebot" to ignore messages from nick "weebot") (default: "irc_quit,irc_part,notify_none")"
python.urlserver.msg_require_tags = "comma-separated list (without spaces) of tags (or beginning of tags) required to shorten URLs (for example "nick_" to shorten URLs only in messages from other users) (default: "nick_")"
python.urlserver.separators = "separators for short url list (string with exactly 3 chars) (default: "[|]")"
python.urlserver.url_min_length = "minimum length for an URL to be shortened (0 = shorten all URLs, -1 = detect length based on shorten URL) (default: "0")"
python.urlserver.urls_amount = "number of URLs to keep in memory (and in file when script is not loaded) (default: "100")"
